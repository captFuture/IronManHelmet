#include <FastLED.h>

// Anzahl der LEDs für jeden Strip
#define NUM_LEDS_1 20 //Arc Reactor
#define NUM_LEDS_2 4 //Eyes 

// Pin-Definitionen für die LED-Strips
#define DATA_PIN_1 21
#define DATA_PIN_2 22

// Pin-Definition für den Taster
#define BUTTON_PIN 32

// Array für die LED-Daten
CRGB leds1[NUM_LEDS_1];
CRGB leds2[NUM_LEDS_2];

// Variable für den Tasterstatus
bool lastButtonState = LOW;
bool currentButtonState = LOW;
bool colorsSwapped = false;  // Flag, um den Zustand der Farben zu speichern

void setup() {
  // FastLED initialisieren
  FastLED.addLeds<WS2812B, DATA_PIN_1, GRB>(leds1, NUM_LEDS_1);
  FastLED.addLeds<WS2812B, DATA_PIN_2, GRB>(leds2, NUM_LEDS_2);

  // Helligkeit festlegen
  FastLED.setBrightness(128);  // Helligkeit auf 50% setzen (Wert von 0 bis 255)

  // Taster-Pin als Eingang definieren
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Taster mit internem Pull-Up-Widerstand
}

void loop() {
  // Tasterzustand abfragen
  currentButtonState = digitalRead(BUTTON_PIN);

  // Prüfen, ob der Taster gedrückt wurde (flankengesteuert)
  if (currentButtonState == LOW && lastButtonState == HIGH) {
    // Farben tauschen
    colorsSwapped = !colorsSwapped; // Toggle zwischen den Zuständen
    delay(50);  // Entprellzeit für den Taster
  }

  // Letzten Tasterzustand speichern
  lastButtonState = currentButtonState;

  // LED-Strips je nach Zustand des Flags `colorsSwapped` steuern
  if (colorsSwapped) {
    // Wenn Farben getauscht wurden: LEDs 1 auf rot, LEDs 2 auf blau
    fill_solid(leds1, NUM_LEDS_1, CHSV(0, 255, 128));   // Rot mit halber Helligkeit
    fill_solid(leds2, NUM_LEDS_2, CHSV(160, 255, 128));  // Blau mit halber Helligkeit
  } else {
    // Wenn keine Farben getauscht wurden: LEDs 1 auf blau, LEDs 2 auf rot
    fill_solid(leds1, NUM_LEDS_1, CHSV(160, 255, 128));  // Blau mit halber Helligkeit
    fill_solid(leds2, NUM_LEDS_2, CHSV(0, 255, 128));   // Rot mit halber Helligkeit
  }

  // LED-Strips aktualisieren
  FastLED.show();
}